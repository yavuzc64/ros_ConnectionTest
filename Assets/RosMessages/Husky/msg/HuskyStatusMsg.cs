//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Husky
{
    [Serializable]
    public class HuskyStatusMsg : Message
    {
        public const string k_RosMessageName = "husky_msgs/HuskyStatus";
        public override string RosMessageName => k_RosMessageName;

        public HeaderMsg header;
        //  MCU Uptime, in ms
        public uint uptime;
        //  ROS Control loop frequency (PC-side)
        public double ros_control_loop_freq;
        //  Current draw of platform components, in amps
        public double mcu_and_user_port_current;
        public double left_driver_current;
        public double right_driver_current;
        //  Voltage of platform components, in volts
        public double battery_voltage;
        public double left_driver_voltage;
        public double right_driver_voltage;
        //  Component temperatures, in C
        public double left_driver_temp;
        public double right_driver_temp;
        public double left_motor_temp;
        public double right_motor_temp;
        //  Battery capacity (Wh) and charge (%) estimate
        public ushort capacity_estimate;
        public double charge_estimate;
        //  Husky error/stop conditions
        public bool timeout;
        public bool lockout;
        public bool e_stop;
        public bool ros_pause;
        public bool no_battery;
        public bool current_limit;

        public HuskyStatusMsg()
        {
            this.header = new HeaderMsg();
            this.uptime = 0;
            this.ros_control_loop_freq = 0.0;
            this.mcu_and_user_port_current = 0.0;
            this.left_driver_current = 0.0;
            this.right_driver_current = 0.0;
            this.battery_voltage = 0.0;
            this.left_driver_voltage = 0.0;
            this.right_driver_voltage = 0.0;
            this.left_driver_temp = 0.0;
            this.right_driver_temp = 0.0;
            this.left_motor_temp = 0.0;
            this.right_motor_temp = 0.0;
            this.capacity_estimate = 0;
            this.charge_estimate = 0.0;
            this.timeout = false;
            this.lockout = false;
            this.e_stop = false;
            this.ros_pause = false;
            this.no_battery = false;
            this.current_limit = false;
        }

        public HuskyStatusMsg(HeaderMsg header, uint uptime, double ros_control_loop_freq, double mcu_and_user_port_current, double left_driver_current, double right_driver_current, double battery_voltage, double left_driver_voltage, double right_driver_voltage, double left_driver_temp, double right_driver_temp, double left_motor_temp, double right_motor_temp, ushort capacity_estimate, double charge_estimate, bool timeout, bool lockout, bool e_stop, bool ros_pause, bool no_battery, bool current_limit)
        {
            this.header = header;
            this.uptime = uptime;
            this.ros_control_loop_freq = ros_control_loop_freq;
            this.mcu_and_user_port_current = mcu_and_user_port_current;
            this.left_driver_current = left_driver_current;
            this.right_driver_current = right_driver_current;
            this.battery_voltage = battery_voltage;
            this.left_driver_voltage = left_driver_voltage;
            this.right_driver_voltage = right_driver_voltage;
            this.left_driver_temp = left_driver_temp;
            this.right_driver_temp = right_driver_temp;
            this.left_motor_temp = left_motor_temp;
            this.right_motor_temp = right_motor_temp;
            this.capacity_estimate = capacity_estimate;
            this.charge_estimate = charge_estimate;
            this.timeout = timeout;
            this.lockout = lockout;
            this.e_stop = e_stop;
            this.ros_pause = ros_pause;
            this.no_battery = no_battery;
            this.current_limit = current_limit;
        }

        public static HuskyStatusMsg Deserialize(MessageDeserializer deserializer) => new HuskyStatusMsg(deserializer);

        private HuskyStatusMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.uptime);
            deserializer.Read(out this.ros_control_loop_freq);
            deserializer.Read(out this.mcu_and_user_port_current);
            deserializer.Read(out this.left_driver_current);
            deserializer.Read(out this.right_driver_current);
            deserializer.Read(out this.battery_voltage);
            deserializer.Read(out this.left_driver_voltage);
            deserializer.Read(out this.right_driver_voltage);
            deserializer.Read(out this.left_driver_temp);
            deserializer.Read(out this.right_driver_temp);
            deserializer.Read(out this.left_motor_temp);
            deserializer.Read(out this.right_motor_temp);
            deserializer.Read(out this.capacity_estimate);
            deserializer.Read(out this.charge_estimate);
            deserializer.Read(out this.timeout);
            deserializer.Read(out this.lockout);
            deserializer.Read(out this.e_stop);
            deserializer.Read(out this.ros_pause);
            deserializer.Read(out this.no_battery);
            deserializer.Read(out this.current_limit);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.uptime);
            serializer.Write(this.ros_control_loop_freq);
            serializer.Write(this.mcu_and_user_port_current);
            serializer.Write(this.left_driver_current);
            serializer.Write(this.right_driver_current);
            serializer.Write(this.battery_voltage);
            serializer.Write(this.left_driver_voltage);
            serializer.Write(this.right_driver_voltage);
            serializer.Write(this.left_driver_temp);
            serializer.Write(this.right_driver_temp);
            serializer.Write(this.left_motor_temp);
            serializer.Write(this.right_motor_temp);
            serializer.Write(this.capacity_estimate);
            serializer.Write(this.charge_estimate);
            serializer.Write(this.timeout);
            serializer.Write(this.lockout);
            serializer.Write(this.e_stop);
            serializer.Write(this.ros_pause);
            serializer.Write(this.no_battery);
            serializer.Write(this.current_limit);
        }

        public override string ToString()
        {
            return "HuskyStatusMsg: " +
            "\nheader: " + header.ToString() +
            "\nuptime: " + uptime.ToString() +
            "\nros_control_loop_freq: " + ros_control_loop_freq.ToString() +
            "\nmcu_and_user_port_current: " + mcu_and_user_port_current.ToString() +
            "\nleft_driver_current: " + left_driver_current.ToString() +
            "\nright_driver_current: " + right_driver_current.ToString() +
            "\nbattery_voltage: " + battery_voltage.ToString() +
            "\nleft_driver_voltage: " + left_driver_voltage.ToString() +
            "\nright_driver_voltage: " + right_driver_voltage.ToString() +
            "\nleft_driver_temp: " + left_driver_temp.ToString() +
            "\nright_driver_temp: " + right_driver_temp.ToString() +
            "\nleft_motor_temp: " + left_motor_temp.ToString() +
            "\nright_motor_temp: " + right_motor_temp.ToString() +
            "\ncapacity_estimate: " + capacity_estimate.ToString() +
            "\ncharge_estimate: " + charge_estimate.ToString() +
            "\ntimeout: " + timeout.ToString() +
            "\nlockout: " + lockout.ToString() +
            "\ne_stop: " + e_stop.ToString() +
            "\nros_pause: " + ros_pause.ToString() +
            "\nno_battery: " + no_battery.ToString() +
            "\ncurrent_limit: " + current_limit.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
